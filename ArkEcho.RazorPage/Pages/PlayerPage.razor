@page "/Player"

@layout PlayerLayout

@inject IAppModel Model

<MudStack>

    <MudPaper Class="d-flex" Style="top: 0; width: 100%" Elevation="1">

        <MudSelect @bind-Value=selectedDisplayMode T="DisplayMode" Margin="Margin.Dense" Variant="Variant.Filled">
            @foreach(DisplayMode mode in DisplayMode.displayModes)
            {
                <MudSelectItem Value="@(mode)" />
            }
        </MudSelect>
        <MudSpacer />

        <MudSelect @bind-Value=selectedSortingMode T="SortingMode" Margin="Margin.Dense" Variant="Variant.Filled">
            @foreach(SortingMode mode in SortingMode.sortModes)
            {
                <MudSelectItem Value="@mode" />
            }
        </MudSelect>
        <MudTextField @bind-Value="searchMusicValue" Label="Search" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Secondary" />
    </MudPaper>

    <MudPaper Class="d-flex" Elevation="0">
        <input type="text" id="searchMusic" name="searchMusic" @bind=@searchMusicValue>
        <button @onclick="Search">Suche</button>
        <br />

        <button @onclick="Init">Init</button>
        <br />
        <br />
    </MudPaper>

</MudStack>


@code
{
    
    

    private DisplayMode selectedDisplayMode = DisplayMode.displayModes.FirstOrDefault();
    private SortingMode selectedSortingMode = SortingMode.sortModes.FirstOrDefault();

    private string searchMusicValue = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private void Search()
    {
        Core.MusicFile file = Model.Library.MusicFiles.Find(x => x.Title.StartsWith(searchMusicValue, StringComparison.OrdinalIgnoreCase));

        if (file == null)
            return;

        List<Core.MusicFile> Files = new List<Core.MusicFile>() { file };
        Model.Player.Start(Files, 0);
    }

    private void Init()
    {
        List<Core.MusicFile> all = Model.Library.MusicFiles;
        List<Core.MusicFile> Files = new List<Core.MusicFile>();

        if (Model.Library.MusicFiles.Count == 0) // TODO: Give Error
            return;

        Model.Library.Album[8].MusicFiles.ForEach(x => Files.Add(all.Find(y => y.GUID == x)));

        Model.Player.Start(Files, 0);
    }
}