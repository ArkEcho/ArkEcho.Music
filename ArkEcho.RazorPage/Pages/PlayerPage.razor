@page "/Player"

@layout MainLayout

@inject IAppModel Model

<p>MusicFileCount: @musicFileCounter</p>

<input type="text" id="searchMusic" name="searchMusic" @bind=@searchMusicValue>
<button @onclick="Search">Suche</button>
<br />

<button @onclick="Init">Init</button>
<br />
<br />

<label for="playing">Playing:</label>
<input type="checkbox" id="playing" name="playing" checked="@Model.Player.Playing">
<br />

<p>@SongInfo</p>

<p>@Model.Player.Position</p>
<br />

<img src=@Image64 width=100 height=100/>

<PlayerControl />

@code
{
    private string Image64 = string.Empty;
    private string SongInfo = string.Empty;

    private int musicFileCounter = 0;
    private string searchMusicValue = string.Empty;

    private List<string> Logs = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        Model.Player.TitleChanged += () => titleChanged();
        Model.Player.PositionChanged += () => positionChanged();
        Model.Player.PlayingChanged += () => playingChanged();

        musicFileCounter = Model.Library.MusicFiles.Count;

        await InvokeAsync(StateHasChanged);

        await base.OnInitializedAsync();
    }

    private bool logOnPage(string Text, Logging.LogLevel Level)
    {
        Logs.Add($"{Level}\t-\t{Text}");
        return true;
    }

    private async Task titleChanged()
    {
        MusicFile file = Model.Player.PlayingFile;
        if (file == null)
            return;

        SongInfo = $"{file.Title} - {file.Performer}";
        await setAlbumCover();

        await InvokeAsync(StateHasChanged);
    }

    private async Task positionChanged()
    {
        await InvokeAsync(StateHasChanged);     
    }

    private async Task playingChanged()
    {        
        await InvokeAsync(StateHasChanged);
    }

    private async Task setAlbumCover()
    {        
        string result = await Model.GetAlbumCover(Model.Player.PlayingFile.Album);
        Image64 =  $"data:image/png;base64,{result}";
    }

    private void Search()
    {
        Core.MusicFile file = Model.Library.MusicFiles.Find(x => x.Title.StartsWith(searchMusicValue, StringComparison.OrdinalIgnoreCase));

        if (file == null)
            return;

        List<Core.MusicFile> Files = new List<Core.MusicFile>() { file };
        Model.Player.Start(Files, 0);
    }

    private void Init()
    {
        List<Core.MusicFile> all = Model.Library.MusicFiles;
        List<Core.MusicFile> Files = new List<Core.MusicFile>();

        if (Model.Library.MusicFiles.Count == 0) // TODO: Give Error
            return;

        Model.Library.Album[0].MusicFiles.ForEach(x => Files.Add(all.Find(y => y.GUID == x)));

        Model.Player.Start(Files, 0);
    }
}