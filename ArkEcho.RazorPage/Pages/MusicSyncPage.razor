@page "/Sync"

@layout MainLayout

@inject IAppModel Model
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Small">
    <MudPaper Class="my-4 pa-2" Outlined="true">
        <MudStack>
            <MudStack Class="my-1" Row="true">
                <MudField Label="Music Library Path" Variant="Variant.Filled">@Model.MusicFolder</MudField>
                @if (showChangeFolderButton())
                {
                    <MudIconButton Class="mt-3" Icon="@Icons.Material.Rounded.FolderOpen" Disabled="@(status == Resources.Status.Busy)" 
                        Color="Color.Secondary" Size="Size.Medium" OnClick="changeMusicFolder">Sync Music Library</MudIconButton>
                }
            </MudStack>
        
            <MudPaper Class=" my-1 d-flex justify-center" Elevation="0">
                <MudButton Variant="Variant.Filled" Disabled="@(status == Resources.Status.Busy)" Color="Color.Tertiary" OnClick="synchronizeMusic">Sync Music Library</MudButton>
            </MudPaper>

            <MudPaper Class=" my-1 d-flex justify-center" Elevation="0">
                <MudStack Spacing="1">
                    <MudText Align="Align.Center" Typo="Typo.body1">@(status == Resources.Status.Idle ? "Idle" : "Syncing")</MudText>
                    <MudText Align="Align.Center" Typo="Typo.body2">@syncMessage</MudText>
                </MudStack>
            </MudPaper>

            <MudProgressLinear Class="my-1" Color="Color.Success" Rounded="true" Size="Size.Large" Value="@syncProgress" />

        </MudStack>
    </MudPaper>
</MudContainer>

@code {
    private Resources.Status status = Resources.Status.Idle;

    private string syncMessage = string.Empty;
    private int syncProgress = 0;
    protected override async Task OnInitializedAsync()
    {
        Model.Sync.SyncProgress += OnProgressEvent;

        await base.OnInitializedAsync();
    }

    private bool showChangeFolderButton()
    {
        return Model.Environment.Platform == Resources.Platform.Windows; 
    }

    private async void changeMusicFolder()
    {
        bool result = await Model.ChangeMusicFolder();

        if(result)
            Snackbar.Add("Music Folder changed successfully!", Severity.Success, config => { config.ShowCloseIcon = true; });
        else
            Snackbar.Add("Changing Music Folder failed!", Severity.Error, config => { config.ShowCloseIcon = true; });
    }

    private async void synchronizeMusic()
    {
        Model.Player.Stop();

        status = Resources.Status.Busy;

        await Model.StartSynchronizeMusic();

        status = Resources.Status.Idle;

        await InvokeAsync(StateHasChanged);
    }

    private async void OnProgressEvent(object sender, LibrarySync.ProgressEventArgs args)
    {
        syncMessage = args.Message;
        syncProgress = args.ProgressPercent;

        await InvokeAsync(StateHasChanged);
    }
}
