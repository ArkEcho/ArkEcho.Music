@page "/Sync"

@layout MainLayout

@inject IAppModel Model
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Small">
    <MudStack>

        <MudStack Row="true">
            <MudField Label="Music Library Path" Variant="Variant.Filled">@Model.MusicFolder</MudField>
            @if (showChangeFolderButton())
            {
                <MudIconButton Icon="@Icons.Material.Rounded.FolderOpen" Size="Size.Medium" OnClick="changeMusicFolder">Sync Music Library</MudIconButton>
            }
        </MudStack>

        <MudButton Variant="Variant.Filled" OnClick="synchronizeMusic">Sync Music Library</MudButton>

        <MudProgressLinear Color="Color.Success" Rounded="true" Size="Size.Large" Value="@syncProgress" />

        <MudText Typo="Typo.body1">@syncMessage</MudText>
        <MudText Typo="Typo.body1">@status</MudText>

    </MudStack>
        
</MudContainer>

@code {
    private string status = "Idle";

    private string syncMessage = string.Empty;
    private int syncProgress = 0;
    protected override async Task OnInitializedAsync()
    {
        Model.Sync.SyncProgress += OnProgressEvent;

        await base.OnInitializedAsync();
    }

    private bool showChangeFolderButton()
    {
        return Model.Environment.Platform == Resources.Platform.Windows; 
    }

    private async void changeMusicFolder()
    {
        bool result = await Model.ChangeMusicFolder();

        if(result)
            Snackbar.Add("Music Folder changed successfully!", Severity.Success, config => { config.ShowCloseIcon = true; });
        else
            Snackbar.Add("Changing Music Folder failed!", Severity.Error, config => { config.ShowCloseIcon = true; });
    }

    private async void synchronizeMusic()
    {
        Model.Player.Stop();

        status = "Syncing";

        await Model.StartSynchronizeMusic();

        status = "Idle";

        await InvokeAsync(StateHasChanged);
    }

    private async void OnProgressEvent(object sender, LibrarySync.ProgressEventArgs args)
    {
        syncMessage = args.Message;
        syncProgress = args.ProgressPercent;

        await InvokeAsync(StateHasChanged);
    }
}
