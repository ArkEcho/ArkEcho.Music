@page "/Sync"

@layout MainLayout

@inject IAppModel Model

<MudContainer MaxWidth="MaxWidth.Small">
    <MudMainContent>

        <MudButton Variant="Variant.Filled" OnClick="synchronizeMusic">Sync Music Library</MudButton>

        <MudField Label="Music Library Path" Variant="Variant.Outlined">@Model.Config.MusicFolder.LocalPath</MudField>

        <MudProgressLinear Color="Color.Success" Rounded="true" Size="Size.Large" Value="@syncProgress" />

        <MudText Typo="Typo.body1">@syncMessage</MudText>
        <MudText Typo="Typo.body1">@status</MudText>
        
    </MudMainContent>
</MudContainer>

@code {
    private string status = "Idle";

    private string syncMessage = string.Empty;
    private int syncProgress = 0;
    protected override async Task OnInitializedAsync()
    {
        Model.Sync.SyncProgress += OnProgressEvent;

        await base.OnInitializedAsync();
    }

    private async void synchronizeMusic()
    {
        Model.Player.Stop();

        status = "Syncing";

        await Model.SynchronizeMusic();

        status = "Idle";

        // TODO: Reload MusicLibrary Display
        await InvokeAsync(StateHasChanged);
    }

    private async void OnProgressEvent(object sender, LibrarySync.ProgressEventArgs args)
    {
        syncMessage = args.Message;
        syncProgress = args.ProgressPercent;

        await InvokeAsync(StateHasChanged);
    }
}
