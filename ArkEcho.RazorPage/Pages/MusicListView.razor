
@inherits MusicDisplayBase

@inject IAppModel model
@inject HTMLHelper helper

@*<h3>MusicListView @Display.DisplayName, @Sorting.DisplayName</h3>*@

<MudTable Class="d-flex flex-grow-1" Hover="true" Breakpoint="Breakpoint.Sm" Height="800px" FixedHeader="true"
            Items="@getFilteredMusicFileList()" Virtualize="true" GroupBy="@groupDefinition"
            GroupHeaderStyle="background-color:var(--mud-palette-background-grey)"
            GroupFooterClass="mb-4" Dense="true" MultiSelection="false">

    <HeaderContent>
        <MudTh>#</MudTh>
        <MudTh>Titel</MudTh>
        <MudTh>Performer</MudTh>
        <MudTh>Album</MudTh>
        <MudTh>Interpret</MudTh>
        <MudTh>Jahr</MudTh>
    </HeaderContent>

    <ColGroup>
        <col /><col /> <col /> <col /> <col /><col />
    </ColGroup>
    <GroupHeaderTemplate>
            <MudImage Class="rounded-lg z-10" Src="@(helper.GetBase64PngImg(((Album)context.Key).Cover64))" Width="100" Height="100" ObjectFit="ObjectFit.Fill" />
        <MudTh Class="mud-table-cell-custom-group" colspan="6">@($"{((Album)context.Key).Name}") 
            </MudTh>
    </GroupHeaderTemplate>

    <RowTemplate>
        <MudTd DataLabel="Track">@context.Track</MudTd>
        <MudTd DataLabel="Sign">@context.Title</MudTd>
        <MudTd DataLabel="Performer">@context.Performer</MudTd>
        <MudTd DataLabel="Album">@model.Library.GetAlbum(context.Album).Name</MudTd>
        <MudTd DataLabel="Album">@model.Library.GetAlbumArtist(context.AlbumArtist).Name</MudTd>
        <MudTd Style="text-align: right" DataLabel="Year">@context.Year"</MudTd>
    </RowTemplate>

    @*<GroupFooterTemplate>
        <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="5">Total Mass: @context.Items.Sum((e) => e.Duration)</MudTh>
    </GroupFooterTemplate>*@
</MudTable>

@code {
    private TableGroupDefinition<MusicFile> groupDefinition = null;

    protected override Task OnInitializedAsync()
    {
        groupDefinition = new TableGroupDefinition<MusicFile>()
            {
                GroupName = string.Empty,
                Indentation = false,
                Expandable = false,
                Selector = (e) => model.Library.GetAlbum(e.Album)              
            };
        return base.OnInitializedAsync();
    }
}
