@page "/"

@layout CenteredLayout

@inject IDialogService DialogService
@inject AppEnvironment environment
@inject Authentication authentication
@inject NavigationManager navigation
@inject ConnectionStatus status
@inject SnackbarDialogService snackbarDialogService

<MudPaper Class="pa-2" Outlined="true">
    <MudStack>
        <svg width="100%" height="200px" color="white">
            @((MarkupString)ArkEcho.Core.Properties.Resources.logo_svg)
        </svg>

        <MudTextField Class="mt-2" Label="Username" Variant="Variant.Outlined" Immediate="true" @bind-Value="username" @onkeypress="userNameInputKeyPress">Username</MudTextField>

        <MudTextField Class="mt-2" Label="Password" Variant="Variant.Outlined" @bind-Value="password" @ref=passwordInputRef Immediate="true" InputType="@PasswordInput" @onkeypress="passwordInputKeyPress"
                        Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="passwordAdornmentClick" AdornmentAriaLabel="Show Password" />
        
        <MudStack Row=true>
            <MudButton Class="mt-2 d-flex flex-grow-1" Variant="Variant.Filled" Color="Color.Tertiary" OnClick="validateUser" Disabled="@(!status.Connected)">Login</MudButton>
            @if (!status.Connected)
            {
                <MudProgressCircular Class="mt-2 d-flex flex-grow-0 justify-end" Color="Color.Tertiary" Size="Size.Small" Indeterminate="true" />
            }
        </MudStack>
        
        @if (environment.Platform == Resources.Platform.Windows || environment.Platform == Resources.Platform.Android)
        {
            <MudButton Variant="Variant.Text" Color="Color.Info" OnClick="changeServerAddressClicked">Change Server Address</MudButton>
        }
    </MudStack>
</MudPaper>

@code
{
    private string username = string.Empty;
    private string password = string.Empty;

    MudTextField<string> passwordInputRef;
    bool showPasswordAdornment;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private async Task userNameInputKeyPress(KeyboardEventArgs e)
    {
        if (e.Key.Equals("Enter", StringComparison.OrdinalIgnoreCase))
            await passwordInputRef.FocusAsync();
    }

    private async Task passwordInputKeyPress(KeyboardEventArgs e)
    {
        if (e.Key.Equals("Enter", StringComparison.OrdinalIgnoreCase) && status.Connected)
            await validateUser();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            status.ConnectionStatusChanged += () => InvokeAsync(StateHasChanged);

            await status.CheckConnectionAsync();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    protected async override Task OnInitializedAsync()
    {
        // Reroute to music if logged in
        if (await authentication.CheckUserAuthenticated())
        {
            loadMusicPage();
            return;
        }
    }

    private async void changeServerAddressClicked()
    {
        var dialog = await DialogService.ShowAsync<ChangeAddressDialog>("ChangeAddress");        
    }

    private async Task validateUser()
    {
        if (!await authentication.AuthenticateUser(username, password))
        {
            snackbarDialogService.WrongUserCredentials();
            return;
        }

        loadMusicPage();
    }

    private void loadMusicPage()
    {
        navigation.NavigateTo("/Music");
    }

    private void passwordAdornmentClick()
    {
        @if (showPasswordAdornment)
        {
            showPasswordAdornment = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            showPasswordAdornment = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
}