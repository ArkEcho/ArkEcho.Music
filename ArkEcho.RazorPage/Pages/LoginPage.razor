@page "/"

@layout LoginLayout

@inject IAppModel model
@inject Authentication authentication
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudPaper Class="pa-2" Outlined="true">
    <MudStack>
        <svg width="100%" height="200px" color="white">
            @((MarkupString)ArkEcho.Core.Properties.Resources.logo_svg)
        </svg>

        <MudTextField Class="mt-2" Label="Username" Variant="Variant.Outlined" Immediate="true" @bind-Value="username" @onkeypress="inputKeyPress">Username</MudTextField>

        <MudTextField Class="mt-2" Label="Password" Variant="Variant.Outlined" @bind-Value="password" Immediate="true" InputType="@PasswordInput" @onkeypress="inputKeyPress"
                        Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="passwordAdornmentClick" AdornmentAriaLabel="Show Password" />
        
        <MudButton Class="mt-2" Variant="Variant.Filled" Color="Color.Tertiary" OnClick="validateUser" Disabled="@(model.AppStatus != IAppModel.Status.Connected)">Login</MudButton>
        <AppStatus ReconnectClicked="reconnectClicked" />
    </MudStack>
</MudPaper>

<MudOverlay @bind-Visible="overlayVisible" DarkBackground="true" ZIndex="9999">
    <MudProgressCircular Color="Color.Tertiary" Size="Size.Large" Indeterminate="true" />
</MudOverlay>

@code
{
    private bool overlayVisible = false;

    private string username = string.Empty;
    private string password = string.Empty;

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private async Task inputKeyPress(KeyboardEventArgs e)
    {
        if (e.Key.Equals("Enter", StringComparison.OrdinalIgnoreCase) && model.AppStatus == IAppModel.Status.Connected)
            await validateUser();
    }

    private async Task reconnectClicked()
    {
        await model.InitializeOnLoad();
    }

    protected async override Task OnInitializedAsync()
    {
        model.StatusChanged += () => StateHasChanged();

        await model.InitializeOnLoad();

        if (await authentication.IsUserAuthenticated())
        {
            await logIn();
            return;
        }
    }

    private async Task logIn()
    {
        showOverlay(true);

        bool result = await model.InitializeOnLogin();

        showOverlay(false);

        if (!result)
            return;

        NavigationManager.NavigateTo("/Music");
    }

    private async Task validateUser()
    {
        if (!await authentication.AuthenticateUser(username, password))
        {
            Snackbar.Add($"Username or Password wrong!", Severity.Error, config => { config.ShowCloseIcon = true; });
            return;
        }

        await logIn();
    }

    private void showOverlay(bool show)
    {
        overlayVisible = show;
        StateHasChanged();
    }

    private void passwordAdornmentClick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
}