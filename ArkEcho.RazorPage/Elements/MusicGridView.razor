
@inherits MusicDisplayBase

@inject Player player
@inject HTMLHelper helper
@inject NavigationManager navigation

@*<h3>MusicGridView  @Display.DisplayName, @Sorting.DisplayName</h3>*@

<MudElement Style="height: 79vh; width: 100vw;" Class="overflow-auto px-4">
    @*<Virtualize Items="getFilteredAlbumVList()">
        <ItemContent>*@
    <MudGrid Spacing="2" Justify="Justify.Center">
        @foreach (Album album in getFilteredAlbum())
        {
            <MudItem xs="6" sm="4" md="3" lg="2" xl="1" Style="max-width: 220px;">
                <MudPaper Class="pa-2" Style=@getAlbumCSS(album) Elevation="1">
                    <MudStack>
                        <MudImage Class="rounded-lg" Src="@(helper.GetBase64PngImg(album.Cover64))" Width="Resources.ImageSize" Height="Resources.ImageSize" ObjectFit="ObjectFit.Fill" />
                        <MudText Class="mb-n1" Typo="Typo.body2">@album.Name.Truncate(25)</MudText>
                        <MudText Class="my-n1" Typo="Typo.overline">@(getAlbumArtistNameTruncated(album, 25))</MudText>
                        <MudStack Row="true">
                            <MudStack>
                                <MudSpacer />
                                <MudText Class="my-n4" Typo="Typo.overline">@(album.MusicFiles.Count) Titel</MudText>
                                <MudSpacer />
                            </MudStack>
                            <MudIconButton Class="my-n4" OnClick="() => startMusicAlbum(album)" Icon="@Icons.Material.Rounded.PlayArrow" Color="Color.Default" />
                            <MudIconButton Class="my-n4" Icon="@Icons.Material.Rounded.List" OnClick="() => albumListClicked(album)" Color="Color.Default" />
                        </MudStack>
                    </MudStack>
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
    @*</ItemContent>
        <Placeholder>
            <MudGrid Spacing="2" Justify="Justify.Center">
                @for(int i = 0; i<12; i++)
                {
                    <MudItem xs="6" sm="4" md="3" lg="2" xl="2">
                        <MudPaper Class="pa-2" Elevation="1">
                            <MudStack>
                                <MudImage Class="rounded-lg" ObjectFit="ObjectFit.Fill" />

                                <MudText Typo="Typo.body2">NAME</MudText>
                                <MudText Typo="Typo.overline">ARTIST</MudText>
                                    <MudText Typo="Typo.overline">TITEL</MudText>
                                <MudStack Row="true">
                                    <MudIconButton Icon="@Icons.Material.Rounded.PlayArrow" Color="Color.Default" />
                                    <MudSpacer />
                                    <MudIconButton Icon="@Icons.Material.Rounded.List" Color="Color.Default" />
                                </MudStack>
                            </MudStack>
                        </MudPaper>
                    </MudItem>
                }
            </MudGrid>
        </Placeholder>
    </Virtualize>*@
</MudElement>

@code {
    DialogOptions options = new DialogOptions() { FullWidth=true, MaxWidth= MaxWidth.ExtraExtraLarge, CloseButton = true, CloseOnEscapeKey = true };

    public class GridVirtualize
    {
        public List<Album> Elements { get; set; } = new List<Album>();
    }

    protected override async Task OnInitializedAsync()
    {
        player.TitleChanged += () => titleChanged();
        await base.OnInitializedAsync();
    }

    protected async Task titleChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

    private string getAlbumCSS(Album album)
    {
        string result = string.Empty;
        if (player.PlayingFile?.Album == album.GUID)
            result += $"background-color: {Colors.Blue.Darken1};";
        return result;
    }

    private void albumListClicked(Album album)
    {
        navigation.NavigateTo($"/Music/{album.GUID}");
    }

    //private List<GridVirtualize> getFilteredAlbumVList()
    //{
    //    List<GridVirtualize> result = new List<GridVirtualize>();

    //    IEnumerable<Album[]> test = getFilteredAlbum().Chunk(56); // Put max twelve Albums in each virtualized MudGrid

    //    foreach(Album[] sub in test)        
    //        result.Add(new GridVirtualize() { Elements = sub.ToList() });
        
    //    return result;
    //}
}
