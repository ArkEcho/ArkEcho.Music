
@inherits MusicDisplayBase

@inject HTMLHelper helper

@*<h3>MusicGridView  @Display.DisplayName, @Sorting.DisplayName</h3>*@

<MudPaper Height="79vh" Class="overflow-auto">
    <Virtualize Items="getFilteredAlbumVList()">
        <MudGrid Spacing="2" Justify="Justify.Center">
            @foreach(Album album in context.Elements)
            {
                <MudItem xs="6" sm="4" md="3" lg="2" xl="1">
                    <MudCard>
                        <MudCardHeader>
                            <MudImage Class="rounded-lg" Src="@(helper.GetBase64PngImg(album.Cover64))" Width="100" Height="100" ObjectFit="ObjectFit.Fill" />
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText Typo="Typo.body2">@album.Name.Truncate(25)</MudText>
                                <MudText Typo="Typo.overline">@(getAlbumArtistNameTruncated(album))|@(album.MusicFiles.Count)</MudText>
                        </MudCardContent>
                        <MudCardActions>
                            <MudIconButton OnClick="() => startMusicAlbum(album)" Icon="@Icons.Material.Rounded.PlayArrow" Color="Color.Default" />
                            <MudIconButton Icon="@Icons.Material.Rounded.List" Color="Color.Default" />
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    </Virtualize>
</MudPaper>

    @code {
    public class GridVirtualize
    {
        public List<Album> Elements { get; set; } = new List<Album>();
    }

    private List<GridVirtualize> getFilteredAlbumVList()
    {
        List<GridVirtualize> result = new List<GridVirtualize>();

        IEnumerable<Album[]> test = getFilteredAlbum().Chunk(12); // Put max twelve Albums in each virtualized MudGrid

        foreach(Album[] sub in test)        
            result.Add(new GridVirtualize() { Elements = sub.ToList() });
        
        return result;
    }
}
