
@inject IAppModel model

<MudPaper Class="d-flex" Elevation="0">
    <MudPaper Class="d-flex flex-grow-1 justify-start" Elevation="0">
        <MudText Typo="Typo.button">@model.AppStatus</MudText>
    </MudPaper>
    <MudPaper Class="d-flex flex-grow-0 justify-end" Elevation="0">
        @if (model.AppStatus == IAppModel.Status.NotConnected)
        {
            <MudIconButton OnClick="reconnect" Icon="@Icons.Material.Rounded.Replay" Color="Color.Tertiary" Size="Size.Small" />
        }
        else if (model.AppStatus == IAppModel.Status.Initialized)
        {
            <MudIcon Icon="@Icons.Material.Rounded.Check" Color="Color.Tertiary" Size="Size.Small" />
        }
        else
        {
            <MudProgressCircular Color="Color.Tertiary" Size="Size.Small" Indeterminate="true" />            
        }
    </MudPaper>
</MudPaper>

@code {
    private bool showLoading = false;
    private bool showSuccess = false;

    [Parameter]
    public EventCallback ReconnectClicked { get; set; }

    protected async override Task OnInitializedAsync()
    {
        showLoading = true;
        model.StatusChanged += () => onAppStatusChanged();
    }

    private async Task reconnect()
    {
        await ReconnectClicked.InvokeAsync();
    }

    private void onAppStatusChanged()
    {
        StateHasChanged();
    }
}
