
@inject IAppModel model

<MudPaper Class="d-flex" Elevation="0">
    <MudPaper Class="d-flex flex-grow-1 justify-start" Elevation="0">

        <MudText Typo="Typo.button">@model.AppStatus</MudText>
    </MudPaper>
    <MudPaper Class="d-flex flex-grow-0 justify-end" Elevation="0">

        @if (showLoading)
        {
            <MudProgressCircular Color="Color.Tertiary" Size="Size.Small" Indeterminate="true" />
        }
        else if(showConnect)
        {
            <MudIconButton Class="" OnClick="reconnect" Icon="@Icons.Material.Rounded.Replay" Color="Color.Tertiary" Size="Size.Small" />
        }
        else if(showSuccess)
        {
            <MudIcon Class="" OnClick="reconnect" Icon="@Icons.Material.Rounded.Check" Color="Color.Tertiary" Size="Size.Small" />
        }
    </MudPaper>
</MudPaper>

@code {
    private bool showLoading = false;
    private bool showConnect = false;
    private bool showSuccess = false;

    protected async override Task OnInitializedAsync()
    {
        showLoading = true;
        model.StatusChanged += () => onAppStatusChanged();
    }

    private async Task<bool> reconnect()
    {
        return await model.InitializeOnLoad();
    }

    private async Task onAppStatusChanged()
    {
        if (model.AppStatus == IAppModel.Status.NotConnected)
        {
            showLoading = false;
            showConnect = true;
            showSuccess = false;
        }
        else if(model.AppStatus == IAppModel.Status.Initialized)
        {
            showLoading = false;
            showConnect = false;
            showSuccess = true;
        }
        else
        {
            showLoading = true;
            showConnect = false;
            showSuccess = false;
        }
        StateHasChanged();
    }

}
