@inject IAppModel Model

@code {
    public string PlayPauseIcon { get { return Model.Player.Playing ? Icons.Material.Rounded.Pause : Icons.Material.Rounded.PlayArrow; } }
    public string MuteIcon { get { return Model.Player.Mute ? Icons.Material.Rounded.VolumeOff : Icons.Material.Rounded.VolumeUp; } }
    public string ShuffleIcon { get { return Model.Player.Shuffle ? Icons.Material.Rounded.ShuffleOn : Icons.Material.Rounded.Shuffle; } }
    public string Position
    {
        get
        {
            TimeSpan time = TimeSpan.FromSeconds(Model.Player.Position);
            return time.ToString(@"mm\:ss");
        }
    }
    public string SongTitle { get { return playingTitle != null ? playingTitle.Title : string.Empty; } }
    public string SongPerformer { get { return playingTitle != null ? playingTitle.Performer : string.Empty; } }
    public string AlbumName { get { return playingTitle != null ? playingAlbum.Name : string.Empty; } }
    public string AlbumArtistName { get { return playingTitle != null ? playingAlbumArtist.Name : string.Empty; } }

    protected string Image64 = string.Empty;
    protected MusicFile playingTitle = null;
    protected Album playingAlbum = null;
    protected AlbumArtist playingAlbumArtist = null;

    protected void playPause()
    {
        Model.Player.PlayPause();
    }

    protected void backward()
    {
        Model.Player.Backward();
    }

    protected void forward()
    {
        Model.Player.Forward();
    }

    protected void stop()
    {
        Model.Player.Stop();
    }

    protected void shuffle()
    {
        Model.Player.Shuffle = !Model.Player.Shuffle;
    }

    protected void mute()
    {
        Model.Player.Mute = !Model.Player.Mute;
    }

    protected override async Task OnInitializedAsync()
    {
        Model.Player.TitleChanged += () => titleChanged();
        Model.Player.PositionChanged += () => positionChanged();
        Model.Player.PlayingChanged += () => playingChanged();

        await base.OnInitializedAsync();
    }

    protected async Task titleChanged()
    {
        playingTitle = Model.Player.PlayingFile;

        if (playingTitle != null && (playingAlbum == null || playingAlbum.GUID != playingTitle.GUID))
        {
            playingAlbum = Model.Library.Album.Find(x => x.GUID == playingTitle.Album);
            playingAlbumArtist = Model.Library.AlbumArtists.Find(x => x.GUID == playingAlbum.GUID);

            string result = await Model.GetAlbumCover(playingAlbum.GUID);
            Image64 = $"data:image/png;base64,{result}";
        }
        else
        {
            playingAlbum = null;
            Image64 = string.Empty;
        }

        await InvokeAsync(StateHasChanged);
    }

    protected async Task positionChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

    protected async Task playingChanged()
    {
        await InvokeAsync(StateHasChanged);
    }
}
