@inject LibraryControllerBase Model
@inject HTMLHelper helper
@inject Player player

@code {
    public string PlayPauseIcon { get { return player.Playing ? Icons.Material.Rounded.Pause : Icons.Material.Rounded.PlayArrow; } }
    public string MuteIcon { get { return player.Mute ? Icons.Material.Rounded.VolumeOff : Icons.Material.Rounded.VolumeUp; } }
    public string ShuffleIcon { get { return player.Shuffle ? Icons.Material.Rounded.ShuffleOn : Icons.Material.Rounded.Shuffle; } }
    public string PositionTime
    {
        get
        {
            return player.Position.ConvertTimeSeconds();
        }
    }
    public string DurationTime
    { 
        get 
        {
            return player.PlayingFile != null
            ? player.PlayingFile.Duration.ConvertTimeMilliseconds()
            : 0.ConvertTimeMilliseconds();
        } 
    }

    public int DurationSeconds
    {
        get
        {
            return player.PlayingFile != null
            ? Convert.ToInt32(TimeSpan.FromMilliseconds(player.PlayingFile.Duration).TotalSeconds)
            : Convert.ToInt32(TimeSpan.FromSeconds(0).TotalSeconds);
        }
    }

    public string AlbumName { get { return player.PlayingFile != null ? playingAlbum.Name : string.Empty; } }
    public string AlbumArtistName { get { return player.PlayingFile != null ? playingAlbumArtist.Name : string.Empty; } }

    protected string Image64 = string.Empty;
    protected Album playingAlbum = null;
    protected AlbumArtist playingAlbumArtist = null;

    protected string getSongTitle(int maxLength)
    {
        return player.PlayingFile != null ? player.PlayingFile.Title.Truncate(maxLength) : string.Empty;
    }
    
    protected string getSongPerformer(int maxLength)
    {
        return player.PlayingFile != null ? player.PlayingFile.Performer.Truncate(maxLength) : string.Empty;
    }

    protected void playPause()
    {
        player.PlayPause();
    }

    protected void backward()
    {
        player.Backward();
    }

    protected void forward()
    {
        player.Forward();
    }

    protected void stop()
    {
        player.Stop();
    }

    protected void shuffle()
    {
        player.Shuffle = !player.Shuffle;
    }

    protected void mute()
    {
        player.Mute = !player.Mute;
    }

    protected override async Task OnInitializedAsync()
    {
        player.TitleChanged += () => titleChanged();
        player.PositionChanged += () => positionChanged();
        player.PlayingChanged += () => playingChanged();

        await loadSongInfo();

        await base.OnInitializedAsync();
    }

    protected async Task titleChanged()
    {
        await loadSongInfo();
    }

    private async Task loadSongInfo()
    {
        if (player.PlayingFile != null && (playingAlbum == null || playingAlbum.GUID != player.PlayingFile.GUID))
        {
            playingAlbum = Model.Library.GetAlbum(player.PlayingFile.Album);
            playingAlbumArtist = Model.Library.GetAlbumArtist(player.PlayingFile.AlbumArtist);

            if (string.IsNullOrEmpty(playingAlbum.Cover64))
                Image64 = ArkEcho.Core.Properties.Resources.logo_svg;
            else
                Image64 = helper.GetBase64PngImg(playingAlbum.Cover64);
        }
        else
        {
            playingAlbum = null;
            playingAlbumArtist = null;
        }

        await InvokeAsync(StateHasChanged);
    }

    protected async Task playingChanged()
    {
        if (positionSliderChange)
            return;

        await InvokeAsync(StateHasChanged);
    }

    protected async Task positionChanged()
    {
        if (positionSliderChange)
            return;

        await InvokeAsync(StateHasChanged);
    }

    private bool positionSliderChange = false;
    public async Task sliderVolumeChanged(int value)
    {
        positionSliderChange = true;

        player.Position = value;
        await InvokeAsync(StateHasChanged);

        positionSliderChange = false;
    }

    public void sliderMouseDown(MouseEventArgs e)
    {
        positionSliderChange = true;
    }

    public void sliderMouseUp(MouseEventArgs e)
    {
        Task.Run(() => { Thread.Sleep(500); positionSliderChange = false; });
    }
}
