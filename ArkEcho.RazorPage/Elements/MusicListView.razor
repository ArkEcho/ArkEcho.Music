
@inherits MusicDisplayBase

@inject IAppModel model

<MudTable Class="d-flex flex-grow-1" Hover="true" Breakpoint="Breakpoint.Sm" Height="79vh" FixedHeader="true"
            Items="@getFilteredAlbum()" Virtualize="true" GroupBy="@groupDefinition"
            GroupHeaderStyle="background-color:var(--mud-palette-background-grey)"
            GroupFooterClass="mb-4" Dense="true" MultiSelection="false">

    <HeaderContent>
        @*<MudTh>Album</MudTh> <MudTh>#</MudTh> <MudTh>Titel</MudTh> <MudTh>Performer</MudTh> <MudTh>Dauer</MudTh>*@
    </HeaderContent>

    <ColGroup>
        <col span="1" style="width: 100%;" />
    </ColGroup>

    <GroupHeaderTemplate>
        <MudTh Class="mud-table-cell-custom-group" colspan="2">
            <MudText Typo="Typo.caption">@getTableGroupName(context)</MudText>
        </MudTh>
    </GroupHeaderTemplate>

    <RowTemplate>
        <MudTd DataLabel="Data">
            <MusicListHeaderElement Header="@(Display.Mode == DisplayMode.DisplayModes.Album ? context : model.Library.GetAlbumArtist(context.AlbumArtist))"
                              ListElementDoubleClicked="startMusicFile" MusicList="model.Library.GetMusicFiles(context)" />
        </MudTd>
    </RowTemplate>
    
    @*<GroupFooterTemplate>
        <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="5">Total Mass: @context.Items.Sum((e) => e.Duration)</MudTh>
    </GroupFooterTemplate>*@
</MudTable>

@code {
    private TableGroupDefinition<Album> groupDefinition = null;

    protected string getTableGroupName(TableGroupData<object, Album> context)
    {
        switch (Display.Mode)
        {
            case DisplayMode.DisplayModes.Album:
                return ((Album)context.Key).Name;
            case DisplayMode.DisplayModes.AlbumInterpret:
                return ((AlbumArtist)context.Key).Name;
            default:
                return "TABLEGROUPNAME";
        }
    }

    protected override Task OnInitializedAsync()
    {
        groupDefinition = new TableGroupDefinition<Album>()
        {
            GroupName = string.Empty,
            Indentation = false,
            Expandable = false,
            Selector = (e) =>
            {
                switch (Display.Mode)
                {
                    case DisplayMode.DisplayModes.Album:
                        return e;
                    case DisplayMode.DisplayModes.AlbumInterpret:
                    default:
                        return model.Library.GetAlbumArtist(e.AlbumArtist);
                }
            }
        };

        return base.OnInitializedAsync();
    }
}
