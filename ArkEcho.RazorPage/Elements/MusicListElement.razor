
@inject AppEnvironment environment
@inject AppModelBase model
@inject Player player

<MudSimpleTable Class="mx-2 my-1" Dense="true" Hover="true" Bordered="false" Striped="false">
    <thead>
    </thead>
    <colgroup>
        <col span="1" style="width: 5%;">
        <col span="1" style="width: 40%;">
        <col span="1" style="width: 40%;">
        <col span="1" style="width: 10%;">
        <col span="1" style="width: 5%;">
    </colgroup>
    <tbody>
        @foreach (MusicFile file in MusicList)
        {
            if ((environment.Platform == Resources.Platform.Windows || environment.Platform == Resources.Platform.Android) && !file.ExistsLocally)
            {
                <tr class="noselection disabled">
                    <td class="noselection px-6 py-1">@file.Track</td>
                    <td class="noselection px-6 py-1">@file.Title</td>
                    <td class="noselection px-6 py-1">@file.Performer</td>
                    <td class="noselection px-6 py-1">@file.Duration.ConvertTimeMilliseconds()</td>
                    <td class="noselection px-6 py-1">
                        <MudRating SelectedValue=file.Rating Disabled=true Size="Size.Small" />                        
                    </td>
                </tr>
            }
            else
            {
                <tr class="noselection @(getRowColor(file))" @ondblclick="() => ListElementDoubleClicked.InvokeAsync(file)">            
                    <td class="noselection px-6 py-1">@file.Track</td>
                    <td class="noselection px-6 py-1">@file.Title</td>
                    <td class="noselection px-6 py-1">@file.Performer</td>
                    <td class="noselection px-6 py-1">@file.Duration.ConvertTimeMilliseconds()</td>
                    <td class="noselection px-6 py-1">
                        @{
                            int value = file.Rating;
                            <MudRating SelectedValueChanged="(int newValue) => ratingValueChanged(newValue, file)" SelectedValue=@value Size="Size.Small" />
                        }
                    </td>
                </tr>
            }
        }
    </tbody>
</MudSimpleTable>

<style>
    .noselection {
        user-select: none; /* standard syntax */
        -webkit-user-select: none; /* webkit (safari, chrome) browsers */
        -moz-user-select: none; /* mozilla browsers */
        -khtml-user-select: none; /* webkit (konqueror) browsers */
        -ms-user-select: none; /* IE10+ */
    }

    tr.disabled{
        color: var(--mud-palette-black) !important;
    }
    tr.disabled:hover{
        background-color: var(--mud-palette-surface) !important;
    }

    tr.playing{
        background-color: var(--mud-palette-info) !important;
    }
    tr.playing:hover{
        background-color: var(--mud-palette-info-darken) !important;
    }
</style>


@code {

    [Parameter]
    public List<MusicFile> MusicList { get; set; } = new List<MusicFile>();

    [Parameter]
    public EventCallback<MusicFile> ListElementDoubleClicked { get; set; }

    private bool playingTitle = false;

    protected override Task OnInitializedAsync()
    {
        player.TitleChanged += () => titleChanged();
        return base.OnInitializedAsync();
    }

    protected async Task titleChanged()
    {
        if (MusicList.Any(x => x == player.PlayingFile))
        {
            await InvokeAsync(StateHasChanged);
        }
        else if(playingTitle)
        {
            playingTitle = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private string getRowColor(MusicFile file)
    {
        if (player.PlayingFile == null)
            return string.Empty;
        else if (player.PlayingFile.GUID == file.GUID)
        {
            playingTitle = true;
            return "playing";
        }
        return string.Empty;
    }

    protected async Task ratingValueChanged(int newValue, MusicFile selectedFile)
    {
        if (newValue == selectedFile.Rating) // On Display the Event is called...
            return;

        selectedFile.Rating = newValue;
        if (!await model.UpdateMusicRating(selectedFile.GUID, selectedFile.Rating))
        {
            // TODO: Give Error
        }
    }
}
