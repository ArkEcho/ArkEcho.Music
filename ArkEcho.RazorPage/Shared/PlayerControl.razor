@inject IAppModel Model

<MudAppBar Class="rounded-pill" Bottom="true" Fixed="true" Color="Color.Secondary" Elevation="1">

    <MudPaper MaxHeight="100%" MaxWidth="50px" Class="d-flex mud-theme-secondary">
        <MudImage Fluid="true" ObjectFit="ObjectFit.ScaleDown" Src="@Image64" />
    </MudPaper>

    <MudText Class="ml-4" Inline="true" Typo="Typo.body1">@SongTitle<br />@SongPerformer</MudText>

    <MudSpacer />

    <MudText Class="mr-4 d-none d-md-flex" Typo="Typo.body1">@Position</MudText>

    <MudIconButton Class="mx-1 d-none d-md-flex" OnClick="stop" Icon="@Icons.Material.Rounded.Stop" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Medium" />
    <MudIconButton Class="mx-1 d-none d-md-flex" OnClick="shuffle" Icon="@ShuffleIcon" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Medium" />

    <PlayForBack />  @* TODO: Wieder raus *@

    <MudIconButton Class="mx-1 d-none d-sm-flex" OnClick="mute" Icon="@MuteIcon" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Medium" />
    <MudPaper Class="mx-1 pt-2 mud-theme-secondary d-none d-sm-flex" Elevation="0" Width="100px">
        <MudSlider Size="Size.Medium" Min="0" Max="100" Step="5" @bind-Value="Model.Player.Volume" ValueLabel="true" />
    </MudPaper>

    <MudSpacer />

</MudAppBar>

@code 
{
    public string MuteIcon { get { return Model.Player.Mute ? Icons.Material.Rounded.VolumeOff : Icons.Material.Rounded.VolumeUp; } }
    public string ShuffleIcon { get { return Model.Player.Shuffle ? Icons.Material.Rounded.ShuffleOn : Icons.Material.Rounded.Shuffle; } }
    public string Position 
    { 
        get
        {
            TimeSpan time = TimeSpan.FromSeconds(Model.Player.Position);
            return time.ToString(@"mm\:ss");
        } 
    }
    public string SongTitle { get { return playingTitle != null ? playingTitle.Title : string.Empty; } }
    public string SongPerformer { get { return playingTitle != null ? playingTitle.Performer : string.Empty; } }
    public string AlbumName { get { return playingTitle != null ? playingAlbum.Name : string.Empty; } }
    public string AlbumArtistName { get { return playingTitle != null ? playingAlbumArtist.Name : string.Empty; } }

    private string Image64 = string.Empty;
    private MusicFile playingTitle = null;
    private Album playingAlbum = null;
    private AlbumArtist playingAlbumArtist = null;

    private void stop()
    {
        Model.Player.Stop();
    }

    private void shuffle()
    {
        Model.Player.Shuffle = !Model.Player.Shuffle;
    }

    private void mute()
    {
        Model.Player.Mute = !Model.Player.Mute;
    }

    protected override async Task OnInitializedAsync()
    {
        Model.Player.TitleChanged += () => titleChanged();
        Model.Player.PositionChanged += () => positionChanged();
        Model.Player.PlayingChanged += () => playingChanged();

        await InvokeAsync(StateHasChanged);

        await base.OnInitializedAsync();
    }

    private async Task titleChanged()
    {
        playingTitle = Model.Player.PlayingFile;

        if (playingTitle != null && (playingAlbum == null || playingAlbum.GUID != playingTitle.GUID))
        {
            playingAlbum = Model.Library.Album.Find(x => x.GUID == playingTitle.Album);
            playingAlbumArtist = Model.Library.AlbumArtists.Find(x => x.GUID == playingAlbum.GUID);

            string result = await Model.GetAlbumCover(playingAlbum.GUID);
            Image64 = $"data:image/png;base64,{result}";
        }
        else
        {
            playingAlbum = null;
            Image64 = string.Empty;            
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task positionChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

    private async Task playingChanged()
    {
        await InvokeAsync(StateHasChanged);
    }
}
