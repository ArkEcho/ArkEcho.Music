@inherits LayoutComponentBase

@inject AppEnvironment environment
@inject LibraryControllerBase libraryController
@inject Authentication authentication
@inject NavigationManager navigation
@inject SnackbarDialogService snackbarDialogService
@inject Player player
@inject PlatformControllerBase platformController
@inject ConnectionStatus status
@inject ISnackbar snackbar

@implements IAsyncDisposable

<MudElement Class="d-flex appbarstyle" Style="height: 48px">
    <MudElement Class="d-flex justify-start appbarstyle">
        <MudIconButton Class="ml-1" Icon="@Icons.Material.Filled.Menu" Disabled="@(authentication.AuthenticatedUser == null)" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => drawerToggle())" />

        <MudStack Row="true" Spacing="0">
            <svg class="mt-1" width="36px" height="36px">
                @((MarkupString)ArkEcho.Core.Properties.Resources.logo_svg)
            </svg>
            <MudText Class="mt-1" Typo="Typo.h4">Music</MudText>

            @if (environment.Development)
            {
                <MudText Class="mt-1 d-none d-xs-flex d-sm-none" Typo="Typo.h4">&nbsp;&nbsp; xs</MudText>
                <MudText Class="mt-1 d-none d-sm-flex d-md-none" Typo="Typo.h4">&nbsp;&nbsp;sm</MudText>
                <MudText Class="mt-1 d-none d-md-flex d-lg-none" Typo="Typo.h4">&nbsp;&nbsp;md</MudText>
                <MudText Class="mt-1 d-none d-lg-flex d-xl-none" Typo="Typo.h4">&nbsp;&nbsp; lg</MudText>
                <MudText Class="mt-1 d-none d-xl-flex d-xxl-none" Typo="Typo.h4">&nbsp;&nbsp;xl</MudText>
                <MudText Class="mt-1 d-none d-xxl-flex" Typo="Typo.h4">&nbsp;&nbsp;xxl</MudText>
            }
        </MudStack>
    </MudElement>

    <MudElement Class="d-flex flex-grow-1 justify-center appbarstyle" />

    @if (authentication.AuthenticatedUser != null)
    {
        string username = authentication.AuthenticatedUser.UserName;
        <MudElement Class="d-flex justify-end appbarstyle">
            <MudFab Class="mx-2 mt-1" Size="Size.Medium" Color="Color.Tertiary" Label="@(username[0].ToString().ToUpper())" OnClick="userPopoverToggle" />
            <MudPopover Class="pa-2" Open="@userPopoverOpen" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopRight">
                <MudText Typo="Typo.body2" Class="px-4 py-1">@username</MudText>
                <MudDivider Class="ma-2"/>
                <MudButton FullWidth="true" DisableElevation="true" OnClick="logoutButtonClicked">Logout</MudButton>
            </MudPopover>
        </MudElement>
    }

    @if (environment.Platform == Resources.Platform.Windows)
    {
        <MudElement Class="d-flex flex-grow-1 justify-end appbarstyle" Style="max-width: 144px;" />
    }
</MudElement>

<MudDrawer @bind-Open="@showSidebar" Variant="@DrawerVariant.Temporary" Elevation="2">
    <NavMenu />
</MudDrawer>

<MudElement>
    @Body
</MudElement>

<MudOverlay Class="mud-overlay-popover" Visible="userPopoverOpen" OnClick="userPopoverToggle" DarkBackground="false" />

@* Get darker Overlay by applying multiple of them... *@
<MudOverlay @bind-Visible="loadApplicationOverlayVisible" DarkBackground="true" ZIndex="9999">
<MudOverlay @bind-Visible="loadApplicationOverlayVisible" DarkBackground="true" ZIndex="9999">
<MudOverlay @bind-Visible="loadApplicationOverlayVisible" DarkBackground="true" ZIndex="9999">
    <MudProgressCircular Color="Color.Tertiary" Size="Size.Large" Indeterminate="true" />
</MudOverlay>
</MudOverlay>
</MudOverlay>

@* Get darker Overlay by applying multiple of them... *@
<MudOverlay @bind-Visible="logoutOverlayvisible" DarkBackground=true ZIndex="9999">
<MudOverlay @bind-Visible="logoutOverlayvisible" DarkBackground=true ZIndex="9999">
<MudOverlay @bind-Visible="logoutOverlayvisible" DarkBackground=true ZIndex="9999">
    <MudStack>
        <MudStack Row=true>
            <MudSpacer />
            <MudProgressCircular Color="Color.Error" Size="Size.Large" Indeterminate="true" />
            <MudSpacer />
        </MudStack>
        <MudText Typo="Typo.h6">Connection lost, Logout!</MudText>
    </MudStack>
</MudOverlay>
</MudOverlay>
</MudOverlay>

<style>
    .appbarstyle{
        background-color: var(--mud-palette-background-grey);
    }
</style>

@code
{

    private bool showSidebar = false;
    private bool userPopoverOpen = false;
    private bool loadApplicationOverlayVisible = false;
    private bool logoutOverlayvisible = false;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Snackbar and Navigationmanager are loaded when page is loaded
            snackbarDialogService.Initialize(snackbar, navigation);

            navigation.LocationChanged += onLocationChanged;
            await checkAuthentificationAndLibrary();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async void onLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        await checkAuthentificationAndLibrary();
    }

    private async Task checkAuthentificationAndLibrary()
    {
        string page = navigation.Uri.Substring(navigation.BaseUri.Length - 1);
        //Console.WriteLine("Checking on " + page);

        if (string.IsNullOrEmpty(page) || page.Equals("/"))
        {
            //Console.WriteLine("Not navigating");
            return;
        }

        if (authentication.AuthenticatedUser == null)
        {
            await showLoadApplicationOverlay(true);

            if (!await authentication.CheckUserAuthenticated())
            {
                await showLoadApplicationOverlay(false);
                navigation.NavigateTo("/");
                return;
            }
        }

        if (libraryController.Library == null)
        {
            await showLoadApplicationOverlay(true);

            bool result = await libraryController.LoadLibraryFromServer();

            if (!result)
            {
                await showLoadApplicationOverlay(false);

                navigation.NavigateTo("/");
                return;
            }
        }

        await platformController.ProcessUserLogin();
        await showLoadApplicationOverlay(false);
    }

    private async Task showLoadApplicationOverlay(bool show)
    {
        loadApplicationOverlayVisible = show;
        await InvokeAsync(StateHasChanged);
    }

    protected override void OnInitialized()
    {
        status.ConnectionStatusChanged += connectionStatusChanged;
        base.OnInitialized();
    }

    private void userPopoverToggle()
    {
        userPopoverOpen = !userPopoverOpen;
    }

    public void drawerToggle()
    {
        showSidebar = !showSidebar;
    }

    private async void connectionStatusChanged()
    {
        if (status.Connected || authentication.AuthenticatedUser == null)
            return;

        //Console.WriteLine($"Logout on connection lost!");
        await showLogoutOverlay(true);

        await logout(true);

        await showLogoutOverlay(false);
    }

    private async Task showLogoutOverlay(bool show)
    {
        logoutOverlayvisible = show;
        await InvokeAsync(StateHasChanged);
    }

    private async Task logoutButtonClicked()
    {
        //Console.WriteLine($"Logout on User action");
        await logout(true);
    }

    private async Task logout(bool navigateToLogin)
    {
        snackbarDialogService.CloseOnLogout();

        player.Dispose();
        await authentication.LogoutUser();
        await platformController.ProcessUserLogout();
        libraryController.Dispose();

        showSidebar = false;
        userPopoverOpen = false;
        if(navigateToLogin)
            navigation.NavigateTo("/");
    }

    public async ValueTask DisposeAsync()
    {
        await logout(false);
    }
}