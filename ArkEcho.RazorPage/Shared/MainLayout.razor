@inherits LayoutComponentBase

@inject IAppModel model
@inject AppEnvironment environment
@inject NavigationManager NavigationManager

<MudLayout>

    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => drawerToggle())" />
        <MudText Typo="Typo.h5">ArkEcho Music</MudText>
        @if (environment.Development)
        {
            <MudText Class="mx-2 d-none d-xs-flex d-sm-none" Typo="Typo.h5">xs</MudText>
            <MudText Class="mx-2 d-none d-sm-flex d-md-none" Typo="Typo.h5">sm</MudText>
            <MudText Class="mx-2 d-none d-md-flex d-lg-none" Typo="Typo.h5">md</MudText>
            <MudText Class="mx-2 d-none d-lg-flex d-xl-none" Typo="Typo.h5">lg</MudText>
            <MudText Class="mx-2 d-none d-xl-flex d-xxl-none" Typo="Typo.h5">xl</MudText>
            <MudText Class="mx-2 d-none d-xxl-flex" Typo="Typo.h5">xxl</MudText>
        }

        <MudSpacer />

        <MudItem>
            <MudFab Size="Size.Medium" Color="Color.Tertiary" Label="A" OnClick="userPopoverToggle">A</MudFab>
            <MudPopover OverflowBehavior="OverflowBehavior.FlipNever" Open="@userPopoverOpen" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopRight" Class="pa-2">
                <MudText Typo="Typo.body2" Class="px-4 py-1">@model.AuthenticatedUser?.UserName</MudText>
                <MudDivider Class="ma-2"/>
                <MudButton FullWidth="true" DisableElevation="true" OnClick="Logout">Logout</MudButton>
            </MudPopover>
        </MudItem>
    </MudAppBar>

    <MudDrawer @bind-Open="@showSidebar" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>

    <MudMainContent>
        @Body
    </MudMainContent>

</MudLayout>

@code
{
    // TODO: Sync Status in Model, Anzeige über ICON in App Leiste -> Link zu Sync Page
    private bool showSidebar = false;
    private bool userPopoverOpen = false;

    protected override async Task OnInitializedAsync()
    {
        if (!await model.IsUserAuthenticated())
            NavigationManager.NavigateTo("/");
    }

    private void userPopoverToggle()
    {
        userPopoverOpen = !userPopoverOpen;
    }

    public void drawerToggle()
    {
        showSidebar = !showSidebar;
    }

    public async Task Logout()
    {
        await model.LogoutUser();
        NavigationManager.NavigateTo("/");
    }
}