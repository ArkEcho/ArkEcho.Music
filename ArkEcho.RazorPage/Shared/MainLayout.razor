@inherits LayoutComponentBase

@inject AppModelBase model
@inject AppEnvironment environment
@inject ISnackbar snackbar
@inject Authentication authentication
@inject NavigationManager NavigationManager
@* @inject SnackbarDialogService snackbarDialogService // TODO *@ 
@inject Player player
@inject PlatformControllerBase platformController

@implements IAsyncDisposable

<MudPaper Class="d-flex appbarstyle" Style="height: 48px" Elevation="1">
    <MudPaper Class="d-flex justify-start appbarstyle" Elevation="0">
        <MudIconButton Class="ml-1" Icon="@Icons.Material.Filled.Menu" Disabled="@(authentication.AuthenticatedUser == null)" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => drawerToggle())" />

        <MudStack Row="true" Spacing="0">
            <svg class="mt-1" width="36px" height="36px">
                @((MarkupString)ArkEcho.Core.Properties.Resources.logo_svg)
            </svg>
            <MudText Class="mt-1" Typo="Typo.h4">Music</MudText>

            @if (environment.Development)
            {
                <MudText Class="mt-1 d-none d-xs-flex d-sm-none" Typo="Typo.h4">&nbsp;&nbsp; xs</MudText>
                <MudText Class="mt-1 d-none d-sm-flex d-md-none" Typo="Typo.h4">&nbsp;&nbsp;sm</MudText>
                <MudText Class="mt-1 d-none d-md-flex d-lg-none" Typo="Typo.h4">&nbsp;&nbsp;md</MudText>
                <MudText Class="mt-1 d-none d-lg-flex d-xl-none" Typo="Typo.h4">&nbsp;&nbsp; lg</MudText>
                <MudText Class="mt-1 d-none d-xl-flex d-xxl-none" Typo="Typo.h4">&nbsp;&nbsp;xl</MudText>
                <MudText Class="mt-1 d-none d-xxl-flex" Typo="Typo.h4">&nbsp;&nbsp;xxl</MudText>
            }
        </MudStack>
    </MudPaper>

    <MudPaper Class="d-flex flex-grow-1 justify-center appbarstyle" Elevation="0" />

    @if (authentication.AuthenticatedUser != null)
    {
        <MudPaper Class="d-flex justify-end appbarstyle" Elevation="0">
            <MudFab Class="mx-2 mt-1" Size="Size.Medium" Color="Color.Tertiary" Label="Z" OnClick="userPopoverToggle" />
            <MudPopover Class="pa-2" Open="@userPopoverOpen" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopRight">
                <MudText Typo="Typo.body2" Class="px-4 py-1">@authentication?.AuthenticatedUser.UserName</MudText>
                <MudDivider Class="ma-2"/>
                <MudButton FullWidth="true" DisableElevation="true" OnClick="Logout">Logout</MudButton>
            </MudPopover>
        </MudPaper>
    }

    @if (environment.Platform == Resources.Platform.Windows)
    {
        <MudPaper Class="d-flex flex-grow-1 justify-end appbarstyle" MaxWidth="144px" Elevation="0" />
    }
</MudPaper>

<MudDrawer @bind-Open="@showSidebar" Variant="@DrawerVariant.Responsive" Elevation="2">
    <NavMenu />
</MudDrawer>

<MudPaper>
    @Body
</MudPaper>

<MudOverlay Class="mud-overlay-popover" Visible="userPopoverOpen" OnClick="userPopoverToggle" DarkBackground="false" />

<style>
    .appbarstyle{
        background-color: var(--mud-palette-background-grey);
    }
</style>

@code
{
    private bool showSidebar = false;
    private bool userPopoverOpen = false;

    protected override async Task OnInitializedAsync()
    {
        if (!await authentication.IsUserAuthenticated())
            NavigationManager.NavigateTo("/");

        await base.OnInitializedAsync();
    }

    private void userPopoverToggle()
    {
        userPopoverOpen = !userPopoverOpen;
    }

    public void drawerToggle()
    {
        showSidebar = !showSidebar;
    }

    public async Task Logout()
    {
        //snackbarDialogService.CloseOnLogout();

        player.Dispose();
        await authentication.LogoutUser();
        await platformController.ProcessUserLogout();

        showSidebar = false;
        userPopoverOpen = false;
        NavigationManager.NavigateTo("/");
    }

    public async ValueTask DisposeAsync()
    {
        await Logout();
    }
}