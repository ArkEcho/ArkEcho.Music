@inherits LayoutComponentBase

@using System.Security.Claims
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Blazored.LocalStorage.ILocalStorageService localStorageService
@inject IJSRuntime jsRunTime

<div class="page">
	<div class="sidebar">
		<NavMenu />
	</div>

	<div class="main">
		<div class="top-row px-4">
			<AuthorizeView>
				<Authorized>
					<button class="btn btn-secondary" @onclick="Logout">Logout</button>
				</Authorized>
				<NotAuthorized>
					NOT AUTHORIZED
				</NotAuthorized>
			</AuthorizeView>
		</div>

		<div class="content px-4">
			<div>
				@Body
			</div>
			<div class="float-right">
				<UserModalForm @ref="Modal"></UserModalForm>
			</div>
		</div>
	</div>
</div>

@code
{ //ds
	[CascadingParameter]
	private Task<AuthenticationState> authenticationStateTask { get; set; }
	ClaimsPrincipal claimsPrincipal;

	private UserModalForm Modal { get; set; }

	public string LoggedInText { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		claimsPrincipal = (await authenticationStateTask).User;

		LoggedInText = claimsPrincipal.Identities.ToList().Find(x => x.NameClaimType.Equals(ClaimTypes.Name, StringComparison.OrdinalIgnoreCase)).Name;

		if (!claimsPrincipal.Identity.IsAuthenticated)
			NavigationManager.NavigateTo("/");
	}
	public async Task Logout()
	{
		Modal.Open();
		//await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsLoggedOut();
		//NavigationManager.NavigateTo("/");
	} }