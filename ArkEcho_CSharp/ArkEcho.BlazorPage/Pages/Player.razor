@page "/Player"

@using ArkEcho.Core
@inject ArkEcho.Server.ArkEchoServer Server
@inject IJSRuntime JS
@inject ArkEcho.Player.ArkEchoJSPlayer JSPlayer

<p>MusicFileCount: @musicFileCounter</p>

<input type="text" id="searchMusic" name="searchMusic" @bind=@searchMusicValue>
<button class="btn btn-primary" @onclick="Search">Suche</button>

<br />
<button class="btn btn-primary" @onclick="Init">Init</button>
<button class="btn btn-primary" @onclick="Play">Play</button>
<button class="btn btn-primary" @onclick="Pause">Pause</button>
<button class="btn btn-primary" @onclick="PlayPause">PlayPause</button>
<button class="btn btn-primary" @onclick="Stop">Stop</button>
<button class="btn btn-primary" @onclick="Mute">Mute</button>
<button class="btn btn-primary" @onclick="Backward">Backward</button>
<button class="btn btn-primary" @onclick="Forward">Forward</button>

<br />
<br />
<label for="volume">Volume:</label>
<input type="number" id="volume" @bind="JSPlayer.Volume" min="0" max="100">

<br />
<label for="playing">Playing:</label>
<input type="checkbox" id="scales" name="scales" checked="@JSPlayer.Playing">
<br />
<p>@SongInfo</p>

<input type="number" id="AudioPosition" @bind="JSPlayer.Position" />

@code
{
	private string SongInfo = string.Empty;

	private int musicFileCounter = 0;
	private string searchMusicValue = string.Empty;

	protected override Task OnInitializedAsync()
	{
		JSPlayer.Init(JS);
		JSPlayer.TitleChanged += () => updateSongInfo();
		JSPlayer.PositionChanged += () => InvokeAsync(StateHasChanged);
		JSPlayer.PlayingChanged += () => InvokeAsync(StateHasChanged);
		musicFileCounter = Server.GetAllMusicFiles().Count;
		updateSongInfo();
		return base.OnInitializedAsync();
	}

	private void updateSongInfo()
	{
		MusicFile file = JSPlayer.PlayingFile;
		if (file != null)
			SongInfo = $"{file.Title} - {file.Performer}";

		InvokeAsync(StateHasChanged);
	}

	private void Search()
	{
		Core.MusicFile file = Server.GetAllMusicFiles().Find(x => x.Title.StartsWith(searchMusicValue, StringComparison.OrdinalIgnoreCase));

		List<Core.MusicFile> Files = new List<Core.MusicFile>() { file };
		JSPlayer.Start(Files, 0);
	}

	private void Init()
	{
		//Core.MusicFile file = Server.GetAllMusicFiles().Find(x => x.Title.Equals("Du bist schön", StringComparison.OrdinalIgnoreCase));
		//List<Core.MusicFile> Files = new List<Core.MusicFile>() { file };

		List<Core.MusicFile> all = Server.GetAllMusicFiles();
		List<Core.MusicFile> Files = new List<Core.MusicFile>();
		Server.GetAllAlbum()[0].MusicFiles.ForEach(x => Files.Add(all.Find(y => y.GUID == x)));

		JSPlayer.Start(Files, 0);
	}

	private void Play()
	{
		JSPlayer.Play();
	}

	private void Pause()
	{
		JSPlayer.Pause();
	}

	private void PlayPause()
	{
		JSPlayer.PlayPause();
	}

	private void Stop()
	{
		JSPlayer.Stop();
	}

	private void Mute()
	{
		JSPlayer.Mute = !JSPlayer.Mute;
	}

	private void Backward()
	{
		JSPlayer.Backward();
	}

	private void Forward()
	{
		JSPlayer.Forward();
	}
}
