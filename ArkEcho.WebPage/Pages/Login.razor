@page "/"

@layout LoginLayout

@inject AppModel Model
@inject Authentication Authentication
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorageService

<EditForm Model="@user" OnValidSubmit="@ValidateUser">
    
    <div>
        <h3 style="font-weight:bold; color:purple">ArkEcho Login</h3>
    </div>

    <div >
        <input @bind="user.UserName" placeholder="email address" />
    </div>
    <br />

    <div >
        <input type="password" @bind="user.Password" placeholder="password" />
    </div>
    <br />

    <div>
        <input type="submit" value="Login" />
    </div>
    <br />

    <div style="text-align:left; font-weight:bold">
        <span>@LoginMesssage</span>
    </div>

</EditForm>

@code
{
    private User user;
    public string LoginMesssage { get; set; }

    protected async override Task OnInitializedAsync()
    {
        user = new User();

        if (await Authentication.GetAuthenticationState())
            NavigationManager.NavigateTo("/Player");
    }

    private async Task<bool> ValidateUser()
    {
        if (!string.IsNullOrEmpty(user.UserName) && !string.IsNullOrEmpty(user.Password))
        {
            //Console.WriteLine($"Before LogIn, {user.AccessToken}");

            User loggedInUser = await Authentication.AuthenticateUserForLogin(user);
            if (loggedInUser != null)
            {
                //Console.WriteLine($"Logged In, {loggedInUser.AccessToken}");

                await Authentication.MarkUserAsAuthenticated(loggedInUser);

                NavigationManager.NavigateTo("/Player");
            }
            else
                LoginMesssage = "Username or password wrong";
        }
        else
            LoginMesssage = "Empty username or password";

        return await Task.FromResult(true);
    }
}