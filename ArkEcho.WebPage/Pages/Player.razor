@page "/Player"

@layout MainLayout

@inject IJSRuntime JS
@inject AppModel Model

<p>MusicFileCount: @musicFileCounter</p>

<input type="text" id="searchMusic" name="searchMusic" @bind=@searchMusicValue>
<button class="btn btn-primary" @onclick="Search">Suche</button>

<br />
<button class="btn btn-primary" @onclick="Init">Init</button>
<button class="btn btn-primary" @onclick="Play">Play</button>
<button class="btn btn-primary" @onclick="Pause">Pause</button>
<button class="btn btn-primary" @onclick="PlayPause">PlayPause</button>
<button class="btn btn-primary" @onclick="Stop">Stop</button>
<button class="btn btn-primary" @onclick="Mute">Mute</button>
<button class="btn btn-primary" @onclick="Shuffle">Shuffle</button>
<button class="btn btn-primary" @onclick="Backward">Backward</button>
<button class="btn btn-primary" @onclick="Forward">Forward</button>

<br />
<br />
<label for="volume">Volume:</label>
<input type="number" id="volume" @bind="Model.Player.Volume" min="0" max="100">

<br />
<label for="playing">Playing:</label>
<input type="checkbox" id="playing" name="playing" checked="@Model.Player.Playing">
<br />
<label for="muted">Mute:</label>
<input type="checkbox" id="muted" name="muted" checked="@Model.Player.Mute">
<br />
<label for="shuffle">Shuffle:</label>
<input type="checkbox" id="shuffle" name="shuffle" checked="@Model.Player.Shuffle">
<br />
<p>@SongInfo</p>

<p>@Model.Player.Position</p>
<!--
<table class="table" style="width: 50%">
    <thead>
        <tr>
            <th>Logging</th>
        </tr>
    </thead>
    <tbody>
        @foreach (string log in Logs)
        {
<tr>
    <td>@log</td>
</tr>}
    </tbody>
</table>-->

@code
{ 
    private string SongInfo = string.Empty;

    private int musicFileCounter = 0;
    private string searchMusicValue = string.Empty;

    private List<string> Logs = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        Model.Player.TitleChanged += () => updatePlayerInfo();
        Model.Player.PositionChanged += () => updatePlayerInfo();
        Model.Player.PlayingChanged += () => updatePlayerInfo();
        musicFileCounter = Model.Library.MusicFiles.Count;
        updatePlayerInfo();

        await base.OnInitializedAsync();
    }

    private bool logOnPage(string Text, Logging.LogLevel Level)
    {
        Logs.Add($"{Level}\t-\t{Text}");
        return true;
    }

    private void updatePlayerInfo()
    {
        if (Model.Player.PlayingFile != null)
            SongInfo = $"{Model.Player.PlayingFile.Title} - {Model.Player.PlayingFile.Performer}";

        InvokeAsync(StateHasChanged);
    }

    private void Search()
    {
        Core.MusicFile file = Model.Library.MusicFiles.Find(x => x.Title.StartsWith(searchMusicValue, StringComparison.OrdinalIgnoreCase));

        List<Core.MusicFile> Files = new List<Core.MusicFile>() { file };
        Model.Player.Start(Files, 0);
    }

    private void Init()
    {
        //Core.MusicFile file = Server.GetAllMusicFiles().Find(x => x.Title.Equals("Du bist schön", StringComparison.OrdinalIgnoreCase));
        //List<Core.MusicFile> Files = new List<Core.MusicFile>() { file };

        List<Core.MusicFile> all = Model.Library.MusicFiles;
        List<Core.MusicFile> Files = new List<Core.MusicFile>();

        Model.Library.Album[0].MusicFiles.ForEach(x => Files.Add(all.Find(y => y.GUID == x)));

        Model.Player.Start(Files, 0);
    }

    private void Play()
    {
        Model.Player.Play();
    }

    private void Pause()
    {
        Model.Player.Pause();
    }

    private void PlayPause()
    {
        Model.Player.PlayPause();
    }

    private void Stop()
    {
        Model.Player.Stop();
    }

    private void Shuffle()
    {
        Model.Player.Shuffle = !Model.Player.Shuffle;
    }

    private void Mute()
    {
        Model.Player.Mute = !Model.Player.Mute;
    }

    private void Backward()
    {
        Model.Player.Backward();
    }

    private void Forward()
    {
        Model.Player.Forward();
    }
}